// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alliance/alliance/alliance.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardWeightRange struct {
	Min cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=min,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min"`
	Max cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max"`
}

func (m *RewardWeightRange) Reset()         { *m = RewardWeightRange{} }
func (m *RewardWeightRange) String() string { return proto.CompactTextString(m) }
func (*RewardWeightRange) ProtoMessage()    {}
func (*RewardWeightRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae357bc0eb0c4178, []int{0}
}
func (m *RewardWeightRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardWeightRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardWeightRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardWeightRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardWeightRange.Merge(m, src)
}
func (m *RewardWeightRange) XXX_Size() int {
	return m.Size()
}
func (m *RewardWeightRange) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardWeightRange.DiscardUnknown(m)
}

var xxx_messageInfo_RewardWeightRange proto.InternalMessageInfo

// key: denom value: AllianceAsset
type AllianceAsset struct {
	// Denom of the asset. It could either be a native token or an IBC token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	// The reward weight specifies the ratio of rewards that will be given to each alliance asset
	// It does not need to sum to 1. rate = weight / total_weight
	// Native asset is always assumed to have a weight of 1.s
	RewardWeight cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=reward_weight,json=rewardWeight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_weight"`
	// A positive take rate is used for liquid staking derivatives. It defines an rate that is applied per take_rate_interval
	// that will be redirected to the distribution rewards pool
	TakeRate             cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=take_rate,json=takeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_rate"`
	TotalTokens          cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=total_tokens,json=totalTokens,proto3,customtype=cosmossdk.io/math.Int" json:"total_tokens"`
	TotalValidatorShares cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=total_validator_shares,json=totalValidatorShares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_validator_shares"`
	RewardStartTime      time.Time                   `protobuf:"bytes,6,opt,name=reward_start_time,json=rewardStartTime,proto3,stdtime" json:"reward_start_time"`
	RewardChangeRate     cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=reward_change_rate,json=rewardChangeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_change_rate"`
	RewardChangeInterval time.Duration               `protobuf:"bytes,8,opt,name=reward_change_interval,json=rewardChangeInterval,proto3,stdduration" json:"reward_change_interval"`
	LastRewardChangeTime time.Time                   `protobuf:"bytes,9,opt,name=last_reward_change_time,json=lastRewardChangeTime,proto3,stdtime" json:"last_reward_change_time"`
	// set a bound of weight range to limit how much reward weights can scale.
	RewardWeightRange RewardWeightRange `protobuf:"bytes,10,opt,name=reward_weight_range,json=rewardWeightRange,proto3" json:"reward_weight_range"`
	// flag to check if an asset has completed the initialization process after the reward delay
	IsInitialized bool `protobuf:"varint,11,opt,name=is_initialized,json=isInitialized,proto3" json:"is_initialized,omitempty"`
	// flag used to dissolve an alliance asset
	IsDissolving bool `protobuf:"varint,12,opt,name=is_dissolving,json=isDissolving,proto3" json:"is_dissolving,omitempty"`
	// Timestamp when the latest alliance delegation will complete its undelegation and
	// the alliance will be disolved.
	AllianceDissolutionTime *time.Time `protobuf:"bytes,13,opt,name=alliance_dissolution_time,json=allianceDissolutionTime,proto3,stdtime" json:"alliance_dissolution_time,omitempty"`
}

func (m *AllianceAsset) Reset()         { *m = AllianceAsset{} }
func (m *AllianceAsset) String() string { return proto.CompactTextString(m) }
func (*AllianceAsset) ProtoMessage()    {}
func (*AllianceAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae357bc0eb0c4178, []int{1}
}
func (m *AllianceAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllianceAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllianceAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllianceAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllianceAsset.Merge(m, src)
}
func (m *AllianceAsset) XXX_Size() int {
	return m.Size()
}
func (m *AllianceAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_AllianceAsset.DiscardUnknown(m)
}

var xxx_messageInfo_AllianceAsset proto.InternalMessageInfo

type RewardWeightChangeSnapshot struct {
	PrevRewardWeight cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=prev_reward_weight,json=prevRewardWeight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"prev_reward_weight"`
	RewardHistories  []RewardHistory             `protobuf:"bytes,2,rep,name=reward_histories,json=rewardHistories,proto3" json:"reward_histories"`
}

func (m *RewardWeightChangeSnapshot) Reset()         { *m = RewardWeightChangeSnapshot{} }
func (m *RewardWeightChangeSnapshot) String() string { return proto.CompactTextString(m) }
func (*RewardWeightChangeSnapshot) ProtoMessage()    {}
func (*RewardWeightChangeSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae357bc0eb0c4178, []int{2}
}
func (m *RewardWeightChangeSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardWeightChangeSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardWeightChangeSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardWeightChangeSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardWeightChangeSnapshot.Merge(m, src)
}
func (m *RewardWeightChangeSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *RewardWeightChangeSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardWeightChangeSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_RewardWeightChangeSnapshot proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RewardWeightRange)(nil), "alliance.alliance.RewardWeightRange")
	proto.RegisterType((*AllianceAsset)(nil), "alliance.alliance.AllianceAsset")
	proto.RegisterType((*RewardWeightChangeSnapshot)(nil), "alliance.alliance.RewardWeightChangeSnapshot")
}

func init() { proto.RegisterFile("alliance/alliance/alliance.proto", fileDescriptor_ae357bc0eb0c4178) }

var fileDescriptor_ae357bc0eb0c4178 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x67, 0xfb, 0x97, 0x0e, 0xa0, 0x65, 0xc4, 0x76, 0x8b, 0x09, 0x10, 0xaa, 0x86, 0xc4, 0x74,
	0x31, 0x35, 0x5e, 0x7a, 0xb2, 0xc8, 0xa1, 0x18, 0x63, 0xec, 0xb6, 0xd1, 0xb4, 0x1e, 0xd6, 0x29,
	0x8c, 0xcb, 0xa4, 0xbb, 0x3b, 0x64, 0x66, 0xa0, 0xc5, 0x4f, 0x60, 0xe2, 0xa5, 0x47, 0x8f, 0xfd,
	0x10, 0x7e, 0x88, 0x1e, 0x3c, 0x34, 0x9e, 0x8c, 0x87, 0xd6, 0xb4, 0x17, 0xcf, 0x7e, 0x02, 0x33,
	0x7f, 0x28, 0x20, 0x31, 0x81, 0xdb, 0xec, 0xbc, 0xf7, 0xfb, 0xbd, 0xdf, 0xfb, 0xed, 0x7b, 0x03,
	0x0a, 0x28, 0x08, 0x08, 0x8a, 0xea, 0xb8, 0x3c, 0x72, 0x70, 0x5a, 0x8c, 0x0a, 0x0a, 0xd3, 0x37,
	0xdf, 0xbd, 0x43, 0x36, 0xe3, 0x53, 0x9f, 0xaa, 0x68, 0x59, 0x9e, 0x74, 0x62, 0x76, 0xa5, 0x4e,
	0x79, 0x48, 0xb9, 0xa7, 0x03, 0xfa, 0xc3, 0x84, 0x72, 0xa3, 0x55, 0x5a, 0x88, 0xa1, 0xf0, 0x26,
	0xee, 0x53, 0xea, 0x07, 0xb8, 0xac, 0xbe, 0x0e, 0xda, 0x1f, 0xca, 0x8d, 0x36, 0x43, 0x82, 0xd0,
	0xc8, 0xc4, 0xf3, 0xff, 0xc6, 0x05, 0x09, 0x31, 0x17, 0x28, 0x6c, 0xe9, 0x84, 0xe2, 0x67, 0x0b,
	0xa4, 0x5d, 0x7c, 0x84, 0x58, 0xe3, 0x2d, 0x26, 0x7e, 0x53, 0xb8, 0x28, 0xf2, 0x31, 0x7c, 0x0a,
	0xa6, 0x43, 0x12, 0xd9, 0x56, 0xc1, 0x2a, 0x2d, 0x54, 0x56, 0xcf, 0x2e, 0xf2, 0xb1, 0x9f, 0x17,
	0xf9, 0x7b, 0x5a, 0x19, 0x6f, 0x1c, 0x3a, 0x84, 0x96, 0x43, 0x24, 0x9a, 0xce, 0x4b, 0xec, 0xa3,
	0x7a, 0xb7, 0x8a, 0xeb, 0xae, 0xcc, 0x57, 0x30, 0x74, 0x6c, 0x4f, 0x4d, 0x02, 0x43, 0xc7, 0x1b,
	0xf1, 0x4f, 0xa7, 0xf9, 0xd8, 0xef, 0xd3, 0x7c, 0xac, 0x78, 0x39, 0x0f, 0x52, 0x9b, 0xa6, 0xd1,
	0x4d, 0xce, 0xb1, 0x80, 0x0f, 0xc1, 0x6c, 0x03, 0x47, 0x34, 0x34, 0x5a, 0x16, 0xff, 0x5c, 0xe4,
	0x93, 0x5d, 0x14, 0x06, 0x1b, 0x45, 0x75, 0x5d, 0x74, 0x75, 0x18, 0x6e, 0x81, 0x14, 0x53, 0x6d,
	0x78, 0x47, 0xaa, 0x8f, 0x49, 0x44, 0x24, 0xd9, 0x80, 0x01, 0xf0, 0x19, 0x58, 0x10, 0xe8, 0x10,
	0x7b, 0x0c, 0x09, 0x6c, 0x4f, 0x8f, 0xcf, 0x12, 0x97, 0x28, 0x17, 0x09, 0x0c, 0x5f, 0x81, 0xa4,
	0xa0, 0x02, 0x05, 0x9e, 0xa0, 0x87, 0x38, 0xe2, 0xf6, 0x8c, 0x22, 0x79, 0x64, 0x48, 0xee, 0x8e,
	0x92, 0xd4, 0x22, 0xf1, 0xfd, 0xeb, 0x1a, 0x30, 0x7f, 0xbe, 0x16, 0x09, 0x37, 0xa1, 0x08, 0x76,
	0x15, 0x1e, 0xee, 0x81, 0x25, 0xcd, 0xd7, 0x41, 0x01, 0x69, 0x20, 0x41, 0x99, 0xc7, 0x9b, 0x88,
	0x61, 0x6e, 0xcf, 0x8e, 0x2f, 0x2f, 0xa3, 0x28, 0xde, 0xf4, 0x18, 0x76, 0x14, 0x01, 0x7c, 0x0d,
	0xd2, 0xc6, 0x36, 0x2e, 0x10, 0x13, 0x9e, 0x1c, 0x0f, 0x7b, 0xae, 0x60, 0x95, 0x12, 0xeb, 0x59,
	0x47, 0xcf, 0x8e, 0xd3, 0x9b, 0x1d, 0x67, 0xb7, 0x37, 0x3b, 0x95, 0xb8, 0xac, 0x78, 0x72, 0x99,
	0xb7, 0xdc, 0xdb, 0x1a, 0xbe, 0x23, 0xd1, 0x32, 0x0e, 0xb7, 0x01, 0x34, 0x8c, 0xf5, 0xa6, 0x9c,
	0x25, 0xed, 0xe3, 0xfc, 0xf8, 0x42, 0x17, 0x35, 0xfc, 0xb9, 0x42, 0x2b, 0x3f, 0xf7, 0xc0, 0xd2,
	0x30, 0x25, 0x89, 0x04, 0x66, 0x1d, 0x14, 0xd8, 0x71, 0xa5, 0x74, 0x65, 0x44, 0x69, 0xd5, 0x6c,
	0x81, 0x16, 0xfa, 0x45, 0x0a, 0xcd, 0x0c, 0xd2, 0xd6, 0x0c, 0x01, 0x7c, 0x07, 0x96, 0x03, 0xc4,
	0x85, 0x37, 0xcc, 0xaf, 0x5c, 0x58, 0x98, 0xc0, 0x85, 0x8c, 0x24, 0x71, 0x07, 0x0a, 0x28, 0x2b,
	0xf6, 0xc1, 0x9d, 0xa1, 0x99, 0xf4, 0x98, 0x0c, 0xd9, 0x40, 0x11, 0xdf, 0x77, 0x46, 0x9e, 0x07,
	0x67, 0x64, 0x11, 0x2b, 0x33, 0xb2, 0x84, 0x9b, 0x66, 0x23, 0x1b, 0xfa, 0x00, 0xdc, 0x22, 0xdc,
	0x23, 0x11, 0x11, 0x04, 0x05, 0xe4, 0x23, 0x6e, 0xd8, 0x89, 0x82, 0x55, 0x8a, 0xbb, 0x29, 0xc2,
	0x6b, 0xfd, 0x4b, 0xb8, 0x0a, 0x52, 0x84, 0x7b, 0x0d, 0xc2, 0x39, 0x0d, 0x3a, 0x24, 0xf2, 0xed,
	0xa4, 0xca, 0x4a, 0x12, 0x5e, 0xbd, 0xb9, 0x83, 0xef, 0xc1, 0x4a, 0x4f, 0x82, 0x49, 0x6d, 0x4b,
	0xf3, 0xb4, 0x0d, 0xa9, 0xb1, 0x6c, 0xb0, 0x94, 0x0d, 0xcb, 0x3d, 0x9a, 0x6a, 0x9f, 0x45, 0xe6,
	0x0d, 0x6c, 0xf8, 0x37, 0x0b, 0x64, 0x07, 0xdb, 0xd4, 0x76, 0xed, 0x44, 0xa8, 0xc5, 0x9b, 0x54,
	0xc8, 0xe9, 0x69, 0x31, 0xdc, 0xf1, 0x86, 0x77, 0x79, 0x82, 0x77, 0x68, 0x51, 0xc2, 0x07, 0x0b,
	0xc0, 0x6d, 0x60, 0x26, 0xca, 0x6b, 0x12, 0x2e, 0x28, 0x23, 0x98, 0xdb, 0x53, 0x85, 0xe9, 0x52,
	0x62, 0xbd, 0xf0, 0xdf, 0x5f, 0xb0, 0xa5, 0x32, 0xbb, 0xc6, 0x7e, 0x33, 0xe3, 0x5b, 0x3d, 0x78,
	0xbf, 0x9d, 0xca, 0x8b, 0xb3, 0xab, 0x9c, 0x75, 0x7e, 0x95, 0xb3, 0x7e, 0x5d, 0xe5, 0xac, 0x93,
	0xeb, 0x5c, 0xec, 0xfc, 0x3a, 0x17, 0xfb, 0x71, 0x9d, 0x8b, 0xed, 0x3f, 0xf6, 0x89, 0x68, 0xb6,
	0x0f, 0x9c, 0x3a, 0x0d, 0xcb, 0x02, 0x33, 0x86, 0xd6, 0x42, 0x1a, 0xe1, 0x6e, 0xff, 0x1d, 0x3f,
	0xee, 0x1f, 0x45, 0xb7, 0x85, 0xf9, 0xc1, 0x9c, 0xf2, 0xf6, 0xc9, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x0e, 0x10, 0x07, 0x5a, 0x06, 0x00, 0x00,
}

func (m *RewardWeightRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardWeightRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardWeightRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Max.Size()
		i -= size
		if _, err := m.Max.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Min.Size()
		i -= size
		if _, err := m.Min.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AllianceAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllianceAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllianceAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllianceDissolutionTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.AllianceDissolutionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.AllianceDissolutionTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintAlliance(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsDissolving {
		i--
		if m.IsDissolving {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsInitialized {
		i--
		if m.IsInitialized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.RewardWeightRange.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastRewardChangeTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRewardChangeTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAlliance(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.RewardChangeInterval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RewardChangeInterval):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintAlliance(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	{
		size := m.RewardChangeRate.Size()
		i -= size
		if _, err := m.RewardChangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RewardStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RewardStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintAlliance(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalValidatorShares.Size()
		i -= size
		if _, err := m.TotalValidatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalTokens.Size()
		i -= size
		if _, err := m.TotalTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TakeRate.Size()
		i -= size
		if _, err := m.TakeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RewardWeight.Size()
		i -= size
		if _, err := m.RewardWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAlliance(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardWeightChangeSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardWeightChangeSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardWeightChangeSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardHistories) > 0 {
		for iNdEx := len(m.RewardHistories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardHistories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlliance(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.PrevRewardWeight.Size()
		i -= size
		if _, err := m.PrevRewardWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAlliance(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAlliance(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlliance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardWeightRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Min.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = m.Max.Size()
	n += 1 + l + sovAlliance(uint64(l))
	return n
}

func (m *AllianceAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAlliance(uint64(l))
	}
	l = m.RewardWeight.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = m.TakeRate.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = m.TotalTokens.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = m.TotalValidatorShares.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RewardStartTime)
	n += 1 + l + sovAlliance(uint64(l))
	l = m.RewardChangeRate.Size()
	n += 1 + l + sovAlliance(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RewardChangeInterval)
	n += 1 + l + sovAlliance(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastRewardChangeTime)
	n += 1 + l + sovAlliance(uint64(l))
	l = m.RewardWeightRange.Size()
	n += 1 + l + sovAlliance(uint64(l))
	if m.IsInitialized {
		n += 2
	}
	if m.IsDissolving {
		n += 2
	}
	if m.AllianceDissolutionTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.AllianceDissolutionTime)
		n += 1 + l + sovAlliance(uint64(l))
	}
	return n
}

func (m *RewardWeightChangeSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PrevRewardWeight.Size()
	n += 1 + l + sovAlliance(uint64(l))
	if len(m.RewardHistories) > 0 {
		for _, e := range m.RewardHistories {
			l = e.Size()
			n += 1 + l + sovAlliance(uint64(l))
		}
	}
	return n
}

func sovAlliance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlliance(x uint64) (n int) {
	return sovAlliance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardWeightRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardWeightRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardWeightRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Min.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Max.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllianceAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllianceAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllianceAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValidatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RewardStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardChangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardChangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardChangeInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.RewardChangeInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardChangeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastRewardChangeTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWeightRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardWeightRange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInitialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInitialized = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDissolving", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDissolving = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllianceDissolutionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllianceDissolutionTime == nil {
				m.AllianceDissolutionTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.AllianceDissolutionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardWeightChangeSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardWeightChangeSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardWeightChangeSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRewardWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevRewardWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlliance
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlliance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardHistories = append(m.RewardHistories, RewardHistory{})
			if err := m.RewardHistories[len(m.RewardHistories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlliance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAlliance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlliance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlliance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlliance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlliance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlliance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlliance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlliance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlliance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlliance = fmt.Errorf("proto: unexpected end of group")
)
